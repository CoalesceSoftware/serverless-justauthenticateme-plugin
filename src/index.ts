import * as fs from "fs-extra";
import * as path from "path";

export = class JustAuthenticateMePlugin {
  private serverless: any;
  private options: any;
  private provider: any;
  private hooks: any;
  private service: any;
  private stage: string;
  private config: {
    appId:
      | string
      | {
          [key: string]: string;
        };
    options: any;
  };

  constructor(serverless, options) {
    this.serverless = serverless;
    this.options = options;
    this.provider = this.serverless.getProvider("aws");

    this.service = this.serverless.service;
    this.stage =
      this.options.stage && this.options.stage.length > 0
        ? this.options.stage
        : this.service.provider.stage;
    if (!this.service.custom.justauthenticateme) {
      throw new Error(
        "JustAuthenticateMe Plugin requires config at `custom.justauthenticateme`"
      );
    }
    this.config = this.service.custom.justauthenticateme;
    this.config.options = this.config.options ?? {};

    /* Hooks tell Serverless when to do what */
    this.hooks = {
      "package:initialize": this.packageInitializeHook.bind(this)
    };
  }

  packageInitializeHook() {
    this.generateAuthorizerFunction();
    this.injectAuthorizerConfigurations();
    this.allowCorsForAuthorizer();
  }

  generateAuthorizerFunction() {
    let appId: string;
    if (typeof this.config.appId === "string") {
      appId = this.config.appId;
    }
    if (typeof this.config.appId === "object") {
      appId = this.config.appId[this.stage];
    }
    if (!appId) {
      throw new Error(
        "JustAuthenticateMe Plugin requires appId to be specified"
      );
    }

    const authFunction = `'use strict';
/* Generated by Serverless JustAuthenticateMe Plugin at ${new Date().toISOString()} */
const authHandler = require("justauthenticateme-apigateway-auth");
const appId = "${appId}";
const options = ${JSON.stringify(this.config.options)};
module.exports.handler = authHandler(appId, options);
`;

    const folderPath = path.join(".serverless", "_justauthenticateme_plugin");
    const artifactPath = path.join(
      this.serverless.config.servicePath,
      folderPath,
      "authorizer.js"
    );
    const handler = path.join(folderPath, "authorizer") + ".handler";

    // Write auth function file
    fs.outputFile(artifactPath, authFunction);

    // Add auth function to service.functions
    this.service.functions.justauthenticatemeCustomAuthorizer = {
      description: "Serverless JustAuthenticateMe Plugin",
      handler,
      name: `${this.service.service}-${this.stage}-justauthenticatemeCustomAuthorizer`,
      runtime: "nodejs12.x",
      events: []
    };
  }

  injectAuthorizerConfigurations() {
    for (const functionName of this.service.getAllFunctions()) {
      const fn = this.service.getFunction(functionName);
      const httpEvent = fn.events?.find(e => Object.keys(e)[0] === "http");
      if (httpEvent?.http.authorizer === "justauthenticateme") {
        httpEvent.http.authorizer = {
          name: "justauthenticatemeCustomAuthorizer",
          type: "request"
        };
      }
    }
  }

  allowCorsForAuthorizer() {
    // Add default 4xx response to resources so 4xx responses have cors
    if (this.serverless.service.resources === undefined) {
      this.serverless.service.resources = {
        Resources: {}
      };
    } else if (this.serverless.service.resources.Resources === undefined) {
      this.serverless.service.resources.Resources = {};
    }
    Object.assign(this.serverless.service.resources.Resources, {
      GatewayResponseDefault4XX: {
        Type: "AWS::ApiGateway::GatewayResponse",
        Properties: {
          ResponseParameters: {
            "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
            "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
          },
          ResponseType: "DEFAULT_4XX",
          RestApiId: {
            Ref: "ApiGatewayRestApi"
          }
        }
      }
    });
  }
};
